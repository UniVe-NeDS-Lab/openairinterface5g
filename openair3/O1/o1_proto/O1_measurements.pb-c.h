/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: O1_measurements.proto */

#ifndef PROTOBUF_C_O1_5fmeasurements_2eproto__INCLUDED
#define PROTOBUF_C_O1_5fmeasurements_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _O1MeasurementReport O1MeasurementReport;
typedef struct _O1UEMeasurementReport O1UEMeasurementReport;
typedef struct _O1GNBMeasurementReport O1GNBMeasurementReport;
typedef struct _O1ULSCHFailure O1ULSCHFailure;
typedef struct _O1RRCFailure O1RRCFailure;


/* --- enums --- */


/* --- messages --- */

struct  _O1MeasurementReport
{
  ProtobufCMessage base;
  O1UEMeasurementReport *ue_msg;
  O1GNBMeasurementReport *gnb_msg;
  O1ULSCHFailure *ulf;
  O1RRCFailure *rrcf;
};
#define O1_MEASUREMENT_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&o1_measurement_report__descriptor) \
    , NULL, NULL, NULL, NULL }


struct  _O1UEMeasurementReport
{
  ProtobufCMessage base;
  int32_t rnti;
  char *imsi;
  int32_t rx_power_avg;
  int32_t rx_power_tot;
  int32_t n0_power_avg;
  int32_t n0_power_tot;
  int32_t rx_rssi_dbm;
  int32_t ssb_rsrp_dbm;
  int32_t mcs;
};
#define O1_UEMEASUREMENT_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&o1_uemeasurement_report__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0 }


struct  _O1GNBMeasurementReport
{
  ProtobufCMessage base;
  int32_t rnti;
  int32_t avg_rsrp;
  int32_t srs_wide_band_snr;
  int32_t dlsch_mcs;
  int32_t ulsch_mcs;
  int32_t cqi;
  float dlsch_bler;
  float ulsch_bler;
};
#define O1_GNBMEASUREMENT_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&o1_gnbmeasurement_report__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _O1ULSCHFailure
{
  ProtobufCMessage base;
  int32_t rnti;
  int32_t failure;
};
#define O1_ULSCHFAILURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&o1_ulschfailure__descriptor) \
    , 0, 0 }


struct  _O1RRCFailure
{
  ProtobufCMessage base;
  int32_t rnti;
  int32_t failure;
};
#define O1_RRCFAILURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&o1_rrcfailure__descriptor) \
    , 0, 0 }


/* O1MeasurementReport methods */
void   o1_measurement_report__init
                     (O1MeasurementReport         *message);
size_t o1_measurement_report__get_packed_size
                     (const O1MeasurementReport   *message);
size_t o1_measurement_report__pack
                     (const O1MeasurementReport   *message,
                      uint8_t             *out);
size_t o1_measurement_report__pack_to_buffer
                     (const O1MeasurementReport   *message,
                      ProtobufCBuffer     *buffer);
O1MeasurementReport *
       o1_measurement_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   o1_measurement_report__free_unpacked
                     (O1MeasurementReport *message,
                      ProtobufCAllocator *allocator);
/* O1UEMeasurementReport methods */
void   o1_uemeasurement_report__init
                     (O1UEMeasurementReport         *message);
size_t o1_uemeasurement_report__get_packed_size
                     (const O1UEMeasurementReport   *message);
size_t o1_uemeasurement_report__pack
                     (const O1UEMeasurementReport   *message,
                      uint8_t             *out);
size_t o1_uemeasurement_report__pack_to_buffer
                     (const O1UEMeasurementReport   *message,
                      ProtobufCBuffer     *buffer);
O1UEMeasurementReport *
       o1_uemeasurement_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   o1_uemeasurement_report__free_unpacked
                     (O1UEMeasurementReport *message,
                      ProtobufCAllocator *allocator);
/* O1GNBMeasurementReport methods */
void   o1_gnbmeasurement_report__init
                     (O1GNBMeasurementReport         *message);
size_t o1_gnbmeasurement_report__get_packed_size
                     (const O1GNBMeasurementReport   *message);
size_t o1_gnbmeasurement_report__pack
                     (const O1GNBMeasurementReport   *message,
                      uint8_t             *out);
size_t o1_gnbmeasurement_report__pack_to_buffer
                     (const O1GNBMeasurementReport   *message,
                      ProtobufCBuffer     *buffer);
O1GNBMeasurementReport *
       o1_gnbmeasurement_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   o1_gnbmeasurement_report__free_unpacked
                     (O1GNBMeasurementReport *message,
                      ProtobufCAllocator *allocator);
/* O1ULSCHFailure methods */
void   o1_ulschfailure__init
                     (O1ULSCHFailure         *message);
size_t o1_ulschfailure__get_packed_size
                     (const O1ULSCHFailure   *message);
size_t o1_ulschfailure__pack
                     (const O1ULSCHFailure   *message,
                      uint8_t             *out);
size_t o1_ulschfailure__pack_to_buffer
                     (const O1ULSCHFailure   *message,
                      ProtobufCBuffer     *buffer);
O1ULSCHFailure *
       o1_ulschfailure__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   o1_ulschfailure__free_unpacked
                     (O1ULSCHFailure *message,
                      ProtobufCAllocator *allocator);
/* O1RRCFailure methods */
void   o1_rrcfailure__init
                     (O1RRCFailure         *message);
size_t o1_rrcfailure__get_packed_size
                     (const O1RRCFailure   *message);
size_t o1_rrcfailure__pack
                     (const O1RRCFailure   *message,
                      uint8_t             *out);
size_t o1_rrcfailure__pack_to_buffer
                     (const O1RRCFailure   *message,
                      ProtobufCBuffer     *buffer);
O1RRCFailure *
       o1_rrcfailure__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   o1_rrcfailure__free_unpacked
                     (O1RRCFailure *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*O1MeasurementReport_Closure)
                 (const O1MeasurementReport *message,
                  void *closure_data);
typedef void (*O1UEMeasurementReport_Closure)
                 (const O1UEMeasurementReport *message,
                  void *closure_data);
typedef void (*O1GNBMeasurementReport_Closure)
                 (const O1GNBMeasurementReport *message,
                  void *closure_data);
typedef void (*O1ULSCHFailure_Closure)
                 (const O1ULSCHFailure *message,
                  void *closure_data);
typedef void (*O1RRCFailure_Closure)
                 (const O1RRCFailure *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor o1_measurement_report__descriptor;
extern const ProtobufCMessageDescriptor o1_uemeasurement_report__descriptor;
extern const ProtobufCMessageDescriptor o1_gnbmeasurement_report__descriptor;
extern const ProtobufCMessageDescriptor o1_ulschfailure__descriptor;
extern const ProtobufCMessageDescriptor o1_rrcfailure__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_O1_5fmeasurements_2eproto__INCLUDED */
